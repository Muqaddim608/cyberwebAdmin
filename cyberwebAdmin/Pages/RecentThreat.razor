@page "/recentthreat"
@attribute [Authorize(Roles = "Administrator")]
@using Blazored.TextEditor
@using cyberwebAdmin.Data
@using ClassLibraryDAL
@using ClassLibraryModel
<h3>RecentThreat</h3>
    <input type="text" placeholder="Threat" @bind-value="data1" />
    <input type="text" placeholder="Cause" @bind-value="data2" />
    <br />

<div class="col-md-8">
    <div class="card">
        <div class="card-header">
            HTML TEXT EDITOR
        </div>
      
        <div class="card-body mb-5" style="height:200px;">
            <BlazoredTextEditor @ref=QuillHtml Placeholder="Awairness">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-video"></button>
                    </span>
                </ToolbarContent>

            </BlazoredTextEditor>
        </div>
    </div>

</div>
    <button class="btn btn-success" @onclick=@(async ()=> await ShowAoutPutPreview() )>Show OutPut</button>
    <div>@preview</div>
    <input type="text" placeholder="Audio link" @bind-value="data4" />
    <button class="btn btn-outline-danger btn-sm" @onclick="(()=>SaveRTD(data1,data2,data3,data4))">submit</button>

<table class="table">
    <thead>
        <tr>
            <th>Threat</th>
            <th>Cause</th>
            <th>Awairness</th>
            <th>Audio</th>
            <th>Delete</th>
        </tr>
    </thead>
    @foreach (var item in RecentThreatData)
    {
        <tr>
            <td>@item.Threat</td>
            <td>@item.Cause</td>
            <td>@item.Awareness</td>
            @savehtml(item.Awareness)
            <td><embed style="width:15px:height:15px" src=@item.Audio /></td>
            <td><button class="btn btn-outline-danger btn-sm" @onclick="(()=>DeleteYTL(item.ThreatId))">Delete</button></td>
        </tr>
    }
</table>
 @foreach (var item in html)
    {
        @item
        <hr />
    }

@code {
    private MarkupString preview,p2;
    private string data1,data2,data3,data4,d2;
    private List<MarkupString> html = new List<MarkupString>();
    private string savehtml(string d)
    {
        p2 = (MarkupString)d;
        html.Add(p2);
        return " ";
    }
    private List<RecentThreatModel> RecentThreatData { get; set; } = new List<RecentThreatModel>();
    private BlazoredTextEditor? QuillHtml = new BlazoredTextEditor();
    protected override void OnInitialized()
    {
        LoadRTD();
    }
    private void LoadRTD()
    {
        RecentThreatData = RecentThreatDAL.GetRT();
    }
    private void SaveRTD(string r1,string r2,string r3,string r4)
    {
        RecentThreatModel RT  = new RecentThreatModel();
        RT.Threat = r1;
        RT.Cause = r2;
        RT.Awareness = r3;
        RT.Audio = r4;
        RecentThreatDAL.SaveRT(RT);
        RT = new RecentThreatModel();
        LoadRTD();

    }
    private void DeleteYTL(int id)
    {
        int i = RecentThreatDAL.DeleteRT(id);
        if (i == 1)
        {
            LoadRTD();
        }
    }


    private async Task ShowAoutPutPreview()
    {
        if (!string.IsNullOrWhiteSpace(await QuillHtml.GetText()))
        {
            data3=await QuillHtml.GetHTML();
            preview = (MarkupString)data3;

        }

    }
}


